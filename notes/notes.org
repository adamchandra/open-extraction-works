* Dev Notes

** Now:
   - [X] Create a pixijs version of img/canvas overly component

   - [ ] Create rect. selection system
     - [ ] Still a bit flakey




** Current Goal(s)
*** Tracelog visualizer
**** Pdf Image viewer
    Display a pdf page as an image
    - [ ] Image overlay, allowing for ...
      - [ ] Draw shape overlays for tracelog visualization
        - via Sketchlib

    - [ ] Text overlay, allowing for ...
      - [ ] Glyphs highlighting
        - via Eventlib/Hover
      - [ ] Text select/copy

***** Sketchlib
      Core system which allows drawing shapes on top of an image
      Uses:
      - Tracelog shape drawing
      - Labeling regions with rectangular selection

***** Superimposed Element Overlays (svg/canvas/html overlays)

      The image/canvas/svg overlay structure
      - Make sure overlays are aligned and z-stacked correctly
      - Draw shapes to svg and canvas
        - Try to take out any overly large helper libraries (d3 and fabric)
      - Zoom in/out, properly modifying geometry of the layers (new feature)
     - [ ] Visual represent overlay system
           Create a visual representation of the overlay system as overlapping sheets, with an output display of the functionality at each level

***** Eventlib system
      The hover/knn event system
      RTree-based event system lives here
      Allow registration of mouse/keyboard handlers
      Use for glyph highlighting/selection
      Will be used for graph paper variants (regular grid vs. free-form glyph placement)

****** Selection system
       Rectangular selection events.

***** Run Trace
      Given a tracelog, display the shapes as pdf image overlays

**** Tooltips

**** Filtering/selection engine
     Search/sort/select log entries to display

**** Infobar
     Simple cell-based informational display
     (optional, review this before implementing)



** Subsystems

** Upcoming Goals
*** Text Viewer for TextWorks
*** Annotation Viewer
*** Annotation Labeler
*** Auth/login implementation using Auth0
*** File-based server local development (no db required)


*** Note:
    Create an initialization ref such that functional components may be sure that their dependencies are ready



** Client-app notes
   Client app is the original version, which is being overhauled
   [[file:~/projects/the-livingroom/rexa-text-extractors/watr-jslibs/packages/client-app/notes/dev-notes.org::*Watrcolor%20client%20file%20organization][Watrcolor client file organization]]


** Possible RBush replacement, a bit faster:
   https://github.com/mourner/flatbush

   

** Eventlib Handler set examples:

const defaultGlobalHandlers = {
  keypress: {
    'x': () => closeCurrWindow 
  }
}

const defaultLocalHandlers = {
  mouseover: (e) => {...}
  mousemove: (e) => {...}
  keys: {
    'ctrl': () => install(rectSelectHandlers) 
  }
}

(localState: S) => { 
  const rectSelectHandlers = {
    init: () => { turnOff(Hover/ClickSelect/tooltips)  }
    dispose: () => { turnBackOn(Hover/ClickSelect/tooltips)  }
    mouseover: (e) => {...}
    mousemove: (e) => {...}
    keydown: {
      'ctrl': () => endSelect, uninstall()
    }
  }
}

TODO maybe use suffix tree for filter search?
