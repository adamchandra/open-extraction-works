function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Some helper functions for working with client-side html
 */
import _ from "lodash";
import $ from "jquery";
import { zipWithIndex } from "./LodashPlus";
export function $id(selector) {
  return $(`#${selector}`);
}
export function mkNbsp(n) {
  const nx = n || 1;

  const nbsps = _.times(nx, _.constant("\u00A0"));

  return document.createTextNode(_.join(nbsps, ""));
}

class JQNodeCtors {
  constructor() {
    _defineProperty(this, "nbsp", mkNbsp);

    _defineProperty(this, "a", nodeCtr("a"));

    _defineProperty(this, "abbr", nodeCtr("abbr"));

    _defineProperty(this, "acronym", nodeCtr("acronym"));

    _defineProperty(this, "address", nodeCtr("address"));

    _defineProperty(this, "applet", nodeCtr("applet"));

    _defineProperty(this, "area", nodeCtr("area"));

    _defineProperty(this, "article", nodeCtr("article"));

    _defineProperty(this, "aside", nodeCtr("aside"));

    _defineProperty(this, "audio", nodeCtr("audio"));

    _defineProperty(this, "b", nodeCtr("b"));

    _defineProperty(this, "base", nodeCtr("base"));

    _defineProperty(this, "basefont", nodeCtr("basefont"));

    _defineProperty(this, "bdi", nodeCtr("bdi"));

    _defineProperty(this, "bdo", nodeCtr("bdo"));

    _defineProperty(this, "big", nodeCtr("big"));

    _defineProperty(this, "blockquote", nodeCtr("blockquote"));

    _defineProperty(this, "body", nodeCtr("body"));

    _defineProperty(this, "br", nodeCtr("br"));

    _defineProperty(this, "button", nodeCtr("button"));

    _defineProperty(this, "canvas", nodeCtr("canvas"));

    _defineProperty(this, "caption", nodeCtr("caption"));

    _defineProperty(this, "center", nodeCtr("center"));

    _defineProperty(this, "cite", nodeCtr("cite"));

    _defineProperty(this, "code", nodeCtr("code"));

    _defineProperty(this, "col", nodeCtr("col"));

    _defineProperty(this, "colgroup", nodeCtr("colgroup"));

    _defineProperty(this, "data", nodeCtr("data"));

    _defineProperty(this, "datalist", nodeCtr("datalist"));

    _defineProperty(this, "dd", nodeCtr("dd"));

    _defineProperty(this, "del", nodeCtr("del"));

    _defineProperty(this, "details", nodeCtr("details"));

    _defineProperty(this, "dfn", nodeCtr("dfn"));

    _defineProperty(this, "dialog", nodeCtr("dialog"));

    _defineProperty(this, "dir", nodeCtr("dir"));

    _defineProperty(this, "div", nodeCtr("div"));

    _defineProperty(this, "dl", nodeCtr("dl"));

    _defineProperty(this, "dt", nodeCtr("dt"));

    _defineProperty(this, "em", nodeCtr("em"));

    _defineProperty(this, "embed", nodeCtr("embed"));

    _defineProperty(this, "fieldset", nodeCtr("fieldset"));

    _defineProperty(this, "figcaption", nodeCtr("figcaption"));

    _defineProperty(this, "figure", nodeCtr("figure"));

    _defineProperty(this, "font", nodeCtr("font"));

    _defineProperty(this, "footer", nodeCtr("footer"));

    _defineProperty(this, "form", nodeCtr("form"));

    _defineProperty(this, "frame", nodeCtr("frame"));

    _defineProperty(this, "frameset", nodeCtr("frameset"));

    _defineProperty(this, "h1", nodeCtr("h1"));

    _defineProperty(this, "h2", nodeCtr("h2"));

    _defineProperty(this, "h3", nodeCtr("h3"));

    _defineProperty(this, "h4", nodeCtr("h4"));

    _defineProperty(this, "h5", nodeCtr("h5"));

    _defineProperty(this, "h6", nodeCtr("h6"));

    _defineProperty(this, "head", nodeCtr("head"));

    _defineProperty(this, "header", nodeCtr("header"));

    _defineProperty(this, "hr", nodeCtr("hr"));

    _defineProperty(this, "html", nodeCtr("html"));

    _defineProperty(this, "i", nodeCtr("i"));

    _defineProperty(this, "iframe", nodeCtr("iframe"));

    _defineProperty(this, "img", nodeCtr("img"));

    _defineProperty(this, "input", nodeCtr("input"));

    _defineProperty(this, "ins", nodeCtr("ins"));

    _defineProperty(this, "kbd", nodeCtr("kbd"));

    _defineProperty(this, "label", nodeCtr("label"));

    _defineProperty(this, "legend", nodeCtr("legend"));

    _defineProperty(this, "li", nodeCtr("li"));

    _defineProperty(this, "link", nodeCtr("link"));

    _defineProperty(this, "main", nodeCtr("main"));

    _defineProperty(this, "map", nodeCtr("map"));

    _defineProperty(this, "mark", nodeCtr("mark"));

    _defineProperty(this, "menu", nodeCtr("menu"));

    _defineProperty(this, "menuitem", nodeCtr("menuitem"));

    _defineProperty(this, "meta", nodeCtr("meta"));

    _defineProperty(this, "meter", nodeCtr("meter"));

    _defineProperty(this, "nav", nodeCtr("nav"));

    _defineProperty(this, "noframes", nodeCtr("noframes"));

    _defineProperty(this, "noscript", nodeCtr("noscript"));

    _defineProperty(this, "ol", nodeCtr("ol"));

    _defineProperty(this, "optgroup", nodeCtr("optgroup"));

    _defineProperty(this, "option", nodeCtr("option"));

    _defineProperty(this, "output", nodeCtr("output"));

    _defineProperty(this, "p", nodeCtr("p"));

    _defineProperty(this, "param", nodeCtr("param"));

    _defineProperty(this, "picture", nodeCtr("picture"));

    _defineProperty(this, "pre", nodeCtr("pre"));

    _defineProperty(this, "progress", nodeCtr("progress"));

    _defineProperty(this, "q", nodeCtr("q"));

    _defineProperty(this, "rp", nodeCtr("rp"));

    _defineProperty(this, "rt", nodeCtr("rt"));

    _defineProperty(this, "ruby", nodeCtr("ruby"));

    _defineProperty(this, "s", nodeCtr("s"));

    _defineProperty(this, "samp", nodeCtr("samp"));

    _defineProperty(this, "script", nodeCtr("script"));

    _defineProperty(this, "section", nodeCtr("section"));

    _defineProperty(this, "select", nodeCtr("select"));

    _defineProperty(this, "small", nodeCtr("small"));

    _defineProperty(this, "source", nodeCtr("source"));

    _defineProperty(this, "span", nodeCtr("span"));

    _defineProperty(this, "strike", nodeCtr("strike"));

    _defineProperty(this, "strong", nodeCtr("strong"));

    _defineProperty(this, "style", nodeCtr("style"));

    _defineProperty(this, "sub", nodeCtr("sub"));

    _defineProperty(this, "summary", nodeCtr("summary"));

    _defineProperty(this, "sup", nodeCtr("sup"));

    _defineProperty(this, "table", nodeCtr("table"));

    _defineProperty(this, "tbody", nodeCtr("tbody"));

    _defineProperty(this, "td", nodeCtr("td"));

    _defineProperty(this, "textarea", nodeCtr("textarea"));

    _defineProperty(this, "tfoot", nodeCtr("tfoot"));

    _defineProperty(this, "th", nodeCtr("th"));

    _defineProperty(this, "thead", nodeCtr("thead"));

    _defineProperty(this, "time", nodeCtr("time"));

    _defineProperty(this, "title", nodeCtr("title"));

    _defineProperty(this, "tr", nodeCtr("tr"));

    _defineProperty(this, "track", nodeCtr("track"));

    _defineProperty(this, "tt", nodeCtr("tt"));

    _defineProperty(this, "u", nodeCtr("u"));

    _defineProperty(this, "ul", nodeCtr("ul"));

    _defineProperty(this, "video", nodeCtr("video"));

    _defineProperty(this, "wbr", nodeCtr("wbr"));
  }

}

export const t = new JQNodeCtors();

const i = (...args) => elem("i", ...args);

const fa = icn => i(".fa", `.fa-${icn}`, {
  "aria-hidden": true
});

export const icon = {
  fa,
  trash: fa("trash"),
  hashtag: fa("hashtag"),
  chevronRight: fa("chevron-right"),
  chevronLeft: fa("chevron-left")
};

function nodeCtr(tag) {
  return (...args) => elem(tag, ...args);
}

function elem(tag, ...args) {
  const $tag = $(`<${tag}></${tag}>`);

  _.each(args, arg => {
    if (typeof arg === "string") {
      const re = /^[\\.#:@=]/;

      if (re.test(arg)) {
        arg.split(/ +/).forEach(attr => {
          if (_.startsWith(attr, ".")) {
            $tag.addClass(attr.slice(1));
          } else if (_.startsWith(attr, "#")) {
            $tag.attr("id", attr.slice(1));
          } else if (_.startsWith(attr, ":")) {
            $tag.attr("type", attr.slice(1));
          } else if (_.startsWith(attr, "@")) {
            $tag.attr("name", attr.slice(1));
          } else if (_.startsWith(attr, "=")) {
            $tag.attr("value", attr.slice(1));
          } else {
            throw new Error(`unexpected attribute type: ${attr}`);
          }
        });
      } else {
        $tag.text(arg);
      }
    } else if (typeof arg === "object") {
      if (arg instanceof $) {
        $tag.append(arg);
      } else if (Array.isArray(arg)) {
        _.each(arg, a0 => {
          $tag.append(a0);
        });
      } else {
        _.each(_.toPairs(arg), ([k, v]) => {
          $tag.attr(k, v);
        });
      }
    } else {
      throw new Error(`unexpected elem initializer: ${arg}`);
    }
  });

  return $tag;
}

export function makeModal(form) {
  const modal = t.div(".modal", ".fade", {
    tabindex: "-1",
    role: "dialog",
    "aria-hidden": true
  }, [t.div(".modal-dialog", {
    role: "document"
  }, [t.div(".modal-content", [t.div(".modal-body", [form])])])]);
  return modal;
}
export const htm = {
  labeledTextInput: (label, key) => {
    return t.span([t.input(":text", `@${key}`, `#${key}`), t.label({
      for: `$key`
    }, label)]);
  },
  labeledTextboxInput: (label, key) => {
    return t.span([t.textarea(":textarea", `@${key}`, `#${key}`), t.label({
      for: `$key`
    }, label)]);
  },
  labeledFileInput: (label, key) => {
    return t.div([t.input(":file", `@${key}`, `#${key}`), t.label({
      for: `$key`
    }, label)]);
  },
  iconButton: iconName => {
    return t.button(".btn-icon", [icon.fa(iconName)]);
  },

  makeRadios(name, values) {
    const radios = _.flatMap(zipWithIndex(values), ([[val, vicon, initCheck, tooltip, callback], vi]) => {
      const id = `${name}-choice-${vi}`;
      const btn = t.input({
        name,
        id,
        type: "radio",
        value: val
      });

      if (initCheck) {
        $(btn).attr("checked", initCheck);
        $(btn).prop("checked", initCheck);
      }

      $(btn).on("change", function () {
        // console.log("changing toolset", callback);
        if ($(this).is(":checked")) {
          callback();
        }
      });
      const label = t.label({
        for: id,
        title: tooltip
      }, [icon.fa(vicon)]);
      return [btn, label];
    });

    const form = t.form(".inline", [t.span(".radio-switch", [radios])]);
    return form;
  },

  makeToggle(name, checkedIcon, uncheckedIcon, initCheck, tooltip) {
    const id = "my-toggle";
    const input = t.input({
      name,
      id,
      type: "checkbox"
    });

    if (initCheck) {
      $(input).attr("checked", initCheck.toString());
      $(input).prop("checked", initCheck.toString());
    }

    const labelOn = t.label(".checked", {
      for: id,
      title: tooltip
    }, [icon.fa(checkedIcon)]);
    const labelOff = t.label(".unchecked", {
      for: id,
      title: tooltip
    }, [icon.fa(uncheckedIcon)]);
    const form = t.form(".inline", [t.span(".toggle-switch", [input, labelOn, labelOff])]);
    return form;
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,