/**
 * Some functional helpers building on, or in the style of, lodash.
 */
import * as _ from "lodash";
export function zipWithIndex(vs, ibegin = 0) {
  return _.zip(vs, _.range(ibegin, vs.length + ibegin));
}
export function sortedUniqCount(array) {
  return sortedUniqCountBy(array);
}
/**
 *
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * sortedUniqCountBy([1.1, 1.2, 2.3, 2.4], Math.floor)
 * // => [[1.1, 2], [2.3, 2]]
 */

export function sortedUniqCountBy(array, iteratee) {
  return array !== null && array.length ? baseSortedUniqCount(array, iteratee) : [];
}
/**
 * TODO test me after refactor
 */

function baseSortedUniqCount(array, iteratee) {
  let seen;
  let index = 0;
  let resIndex = 0;
  const {
    length
  } = array;
  const result = [];

  while (index < length) {
    const value = array[index];
    const computed = iteratee ? iteratee(value) : value;

    if (!index || !_.eq(computed, seen)) {
      seen = computed;
      result[resIndex] = [value, 1];
      resIndex += 1;
    } else {
      result[resIndex - 1][1] += 1;
    }

    index += 1;
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Mb2Rhc2hQbHVzLnRzIl0sIm5hbWVzIjpbIl8iLCJ6aXBXaXRoSW5kZXgiLCJ2cyIsImliZWdpbiIsInppcCIsInJhbmdlIiwibGVuZ3RoIiwic29ydGVkVW5pcUNvdW50IiwiYXJyYXkiLCJzb3J0ZWRVbmlxQ291bnRCeSIsIml0ZXJhdGVlIiwiYmFzZVNvcnRlZFVuaXFDb3VudCIsInNlZW4iLCJpbmRleCIsInJlc0luZGV4IiwicmVzdWx0IiwidmFsdWUiLCJjb21wdXRlZCIsImVxIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBSUEsT0FBTyxLQUFLQSxDQUFaLE1BQW1CLFFBQW5CO0FBRUEsT0FBTyxTQUFTQyxZQUFULENBQXNCQyxFQUF0QixFQUFpQ0MsTUFBTSxHQUFHLENBQTFDLEVBQTZDO0FBQ2xELFNBQU9ILENBQUMsQ0FBQ0ksR0FBRixDQUFNRixFQUFOLEVBQVVGLENBQUMsQ0FBQ0ssS0FBRixDQUFRRixNQUFSLEVBQWdCRCxFQUFFLENBQUNJLE1BQUgsR0FBWUgsTUFBNUIsQ0FBVixDQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNJLGVBQVQsQ0FBNEJDLEtBQTVCLEVBQXVEO0FBQzVELFNBQU9DLGlCQUFpQixDQUFDRCxLQUFELENBQXhCO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBUUEsT0FBTyxTQUFTQyxpQkFBVCxDQUNMRCxLQURLLEVBRUxFLFFBRkssRUFHVTtBQUNmLFNBQU9GLEtBQUssS0FBSyxJQUFWLElBQWtCQSxLQUFLLENBQUNGLE1BQXhCLEdBQ0hLLG1CQUFtQixDQUFDSCxLQUFELEVBQVFFLFFBQVIsQ0FEaEIsR0FFSCxFQUZKO0FBR0Q7QUFFRDs7OztBQUdBLFNBQVNDLG1CQUFULENBQ0VILEtBREYsRUFFRUUsUUFGRixFQUdpQjtBQUNmLE1BQUlFLElBQUo7QUFDQSxNQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlDLFFBQVEsR0FBRyxDQUFmO0FBRUEsUUFBTTtBQUFDUixJQUFBQTtBQUFELE1BQVdFLEtBQWpCO0FBQ0EsUUFBTU8sTUFBcUIsR0FBRyxFQUE5Qjs7QUFFQSxTQUFPRixLQUFLLEdBQUdQLE1BQWYsRUFBdUI7QUFDckIsVUFBTVUsS0FBSyxHQUFHUixLQUFLLENBQUNLLEtBQUQsQ0FBbkI7QUFDQSxVQUFNSSxRQUFRLEdBQUdQLFFBQVEsR0FBR0EsUUFBUSxDQUFDTSxLQUFELENBQVgsR0FBcUJBLEtBQTlDOztBQUVBLFFBQUksQ0FBQ0gsS0FBRCxJQUFVLENBQUNiLENBQUMsQ0FBQ2tCLEVBQUYsQ0FBS0QsUUFBTCxFQUFlTCxJQUFmLENBQWYsRUFBcUM7QUFDbkNBLE1BQUFBLElBQUksR0FBR0ssUUFBUDtBQUNBRixNQUFBQSxNQUFNLENBQUNELFFBQUQsQ0FBTixHQUFtQixDQUFDRSxLQUFELEVBQVEsQ0FBUixDQUFuQjtBQUNBRixNQUFBQSxRQUFRLElBQUksQ0FBWjtBQUNELEtBSkQsTUFJTztBQUNMQyxNQUFBQSxNQUFNLENBQUNELFFBQVEsR0FBRyxDQUFaLENBQU4sQ0FBcUIsQ0FBckIsS0FBMkIsQ0FBM0I7QUFDRDs7QUFDREQsSUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDRDs7QUFDRCxTQUFPRSxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNvbWUgZnVuY3Rpb25hbCBoZWxwZXJzIGJ1aWxkaW5nIG9uLCBvciBpbiB0aGUgc3R5bGUgb2YsIGxvZGFzaC5cbiAqL1xuXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHppcFdpdGhJbmRleCh2czogYW55W10sIGliZWdpbiA9IDApIHtcbiAgcmV0dXJuIF8uemlwKHZzLCBfLnJhbmdlKGliZWdpbiwgdnMubGVuZ3RoICsgaWJlZ2luKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0ZWRVbmlxQ291bnQ8VD4oYXJyYXk6IFRbXSk6IFtULCBudW1iZXJdW10ge1xuICByZXR1cm4gc29ydGVkVW5pcUNvdW50QnkoYXJyYXkpO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogc29ydGVkVW5pcUNvdW50QnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpXG4gKiAvLyA9PiBbWzEuMSwgMl0sIFsyLjMsIDJdXVxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydGVkVW5pcUNvdW50Qnk8VCwgVT4oXG4gIGFycmF5OiBUW10sXG4gIGl0ZXJhdGVlPzogKHQ6IFQpID0+IFUsXG4pOiBbVCwgbnVtYmVyXVtdIHtcbiAgcmV0dXJuIGFycmF5ICE9PSBudWxsICYmIGFycmF5Lmxlbmd0aFxuICAgID8gYmFzZVNvcnRlZFVuaXFDb3VudChhcnJheSwgaXRlcmF0ZWUpXG4gICAgOiBbXTtcbn1cblxuLyoqXG4gKiBUT0RPIHRlc3QgbWUgYWZ0ZXIgcmVmYWN0b3JcbiAqL1xuZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXFDb3VudDxULCBVPihcbiAgYXJyYXk6IFRbXSxcbiAgaXRlcmF0ZWU/OiAodDogVCkgPT4gVSxcbik6IFtULCBudW1iZXJdW10ge1xuICBsZXQgc2VlbjogVCB8IFUgfCB1bmRlZmluZWQ7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCByZXNJbmRleCA9IDA7XG5cbiAgY29uc3Qge2xlbmd0aH0gPSBhcnJheTtcbiAgY29uc3QgcmVzdWx0OiBbVCwgbnVtYmVyXVtdID0gW107XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgY29uc3QgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgaWYgKCFpbmRleCB8fCAhXy5lcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIHJlc3VsdFtyZXNJbmRleF0gPSBbdmFsdWUsIDFdO1xuICAgICAgcmVzSW5kZXggKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4IC0gMV1bMV0gKz0gMTtcbiAgICB9XG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19