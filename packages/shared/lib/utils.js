/**
 * Various Utility functions
 */
import _ from "lodash";
import $ from "jquery"; // @ts-ignore

import { scalazed_Tree as Tree } from "watrmarksJs";
export function pp(a) {
  return JSON.stringify(a, undefined, 2);
}
export function getOrDie(v, msg = "null|undef") {
  if (v === null || v === undefined) {
    throw new Error(`Error: ${msg}`);
  }

  return v;
}
/**
 */

export function corpusEntry() {
  const entry = location.href.split('/').reverse()[0].split('?')[0];
  return entry;
}
export function getParameterByName(name, urlstr) {
  let url = urlstr;
  if (!url) url = window.location.href;
  const name0 = name.replace(/[[]]/g, "\\$&");
  const regex = new RegExp(`[?&]${name0}(=([^&#]*)|&|#|$)`);
  const results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}
export function newIdGenerator() {
  let currId = -1;

  const nextId = () => {
    currId += 1;
    return currId;
  };

  return nextId;
} // export function eventHasLeftClick(event: JQueryInputEventObject) {

export function eventHasLeftClick(event) {
  // buttons: 0=none, 1=left, 3=middle, 2=right
  const b = event.buttons;
  return b === 1;
}
export function getDescendantTree(rootSelector) {
  function loop($elem) {
    const maybeId = $elem.attr('id');
    const cls = $elem.attr('class');
    const id = maybeId === undefined ? '' : `#${maybeId}`;

    const childs = _.map($elem.children(), elemChild => {
      return loop(elemChild);
    });

    if (childs.length > 0) {
      return Tree.Node(`${id}.${cls}`, childs);
    }

    return Tree.Leaf(`${id}.${cls}`);
  }

  return loop($(rootSelector));
}
export function getDescendantTreeString(rootSelector) {
  const desc = getDescendantTree(rootSelector);
  return Tree.drawTree(desc).toString();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy50cyJdLCJuYW1lcyI6WyJfIiwiJCIsInNjYWxhemVkX1RyZWUiLCJUcmVlIiwicHAiLCJhIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsImdldE9yRGllIiwidiIsIm1zZyIsIkVycm9yIiwiY29ycHVzRW50cnkiLCJlbnRyeSIsImxvY2F0aW9uIiwiaHJlZiIsInNwbGl0IiwicmV2ZXJzZSIsImdldFBhcmFtZXRlckJ5TmFtZSIsIm5hbWUiLCJ1cmxzdHIiLCJ1cmwiLCJ3aW5kb3ciLCJuYW1lMCIsInJlcGxhY2UiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibmV3SWRHZW5lcmF0b3IiLCJjdXJySWQiLCJuZXh0SWQiLCJldmVudEhhc0xlZnRDbGljayIsImV2ZW50IiwiYiIsImJ1dHRvbnMiLCJnZXREZXNjZW5kYW50VHJlZSIsInJvb3RTZWxlY3RvciIsImxvb3AiLCIkZWxlbSIsIm1heWJlSWQiLCJhdHRyIiwiY2xzIiwiaWQiLCJjaGlsZHMiLCJtYXAiLCJjaGlsZHJlbiIsImVsZW1DaGlsZCIsImxlbmd0aCIsIk5vZGUiLCJMZWFmIiwiZ2V0RGVzY2VuZGFudFRyZWVTdHJpbmciLCJkZXNjIiwiZHJhd1RyZWUiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUlBLE9BQU9BLENBQVAsTUFBYyxRQUFkO0FBQ0EsT0FBT0MsQ0FBUCxNQUFjLFFBQWQsQyxDQUVBOztBQUNBLFNBQVNDLGFBQWEsSUFBSUMsSUFBMUIsUUFBc0MsYUFBdEM7QUFFQSxPQUFPLFNBQVNDLEVBQVQsQ0FBWUMsQ0FBWixFQUE0QjtBQUNqQyxTQUFPQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsQ0FBZixFQUFrQkcsU0FBbEIsRUFBNkIsQ0FBN0IsQ0FBUDtBQUNEO0FBRUQsT0FBTyxTQUFTQyxRQUFULENBQXFCQyxDQUFyQixFQUE4Q0MsR0FBVyxHQUFHLFlBQTVELEVBQTZF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QUFqQyxFQUErRDtBQUNwRSxRQUFNZSxJQUFJLEdBQUdoQixpQkFBaUIsQ0FBQ0MsWUFBRCxDQUE5QjtBQUNBLFNBQU9wQyxJQUFJLENBQUNvRCxRQUFMLENBQWNELElBQWQsRUFBb0JFLFFBQXBCLEVBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmFyaW91cyBVdGlsaXR5IGZ1bmN0aW9uc1xuICovXG5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgc2NhbGF6ZWRfVHJlZSBhcyBUcmVlIH0gZnJvbSBcIndhdHJtYXJrc0pzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcChhOiBhbnkpOiBzdHJpbmcge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSwgdW5kZWZpbmVkLCAyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yRGllPFQ+KHY6IFQgfCBudWxsIHwgdW5kZWZpbmVkLCBtc2c6IHN0cmluZyA9IFwibnVsbHx1bmRlZlwiKTogVCB7XG4gIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3I6ICR7bXNnfWApO1xuICB9XG4gIHJldHVybiB2O1xufVxuLyoqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3JwdXNFbnRyeSgpOiBzdHJpbmcge1xuICBjb25zdCBlbnRyeSA9IGxvY2F0aW9uLmhyZWYuc3BsaXQoJy8nKS5yZXZlcnNlKClbMF0uc3BsaXQoJz8nKVswXTtcbiAgcmV0dXJuIGVudHJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWU6IHN0cmluZywgdXJsc3RyPzogc3RyaW5nKSB7XG4gIGxldCB1cmwgPSB1cmxzdHI7XG4gIGlmICghdXJsKSB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgY29uc3QgbmFtZTAgPSBuYW1lLnJlcGxhY2UoL1tbXV0vZywgXCJcXFxcJCZcIik7XG4gIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgWz8mXSR7bmFtZTB9KD0oW14mI10qKXwmfCN8JClgKTtcbiAgY29uc3QgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWRHZW5lcmF0b3IoKSB7XG4gIGxldCBjdXJySWQgPSAtMTtcbiAgY29uc3QgbmV4dElkID0gKCkgPT4ge1xuICAgIGN1cnJJZCArPTE7XG4gICAgcmV0dXJuIGN1cnJJZDtcbiAgfTtcbiAgcmV0dXJuIG5leHRJZDtcbn1cblxuXG4vLyBleHBvcnQgZnVuY3Rpb24gZXZlbnRIYXNMZWZ0Q2xpY2soZXZlbnQ6IEpRdWVyeUlucHV0RXZlbnRPYmplY3QpIHtcbmV4cG9ydCBmdW5jdGlvbiBldmVudEhhc0xlZnRDbGljayhldmVudDogSlF1ZXJ5LkV2ZW50KSB7XG4gIC8vIGJ1dHRvbnM6IDA9bm9uZSwgMT1sZWZ0LCAzPW1pZGRsZSwgMj1yaWdodFxuICBjb25zdCBiID0gZXZlbnQuYnV0dG9ucztcbiAgcmV0dXJuIGIgPT09IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXNjZW5kYW50VHJlZShyb290U2VsZWN0b3I6IHN0cmluZyk6IGFueSB7XG5cbiAgZnVuY3Rpb24gbG9vcCgkZWxlbTogSlF1ZXJ5KTogYW55IHtcblxuICAgIGNvbnN0IG1heWJlSWQgPSAkZWxlbS5hdHRyKCdpZCcpO1xuICAgIGNvbnN0IGNscyA9ICRlbGVtLmF0dHIoJ2NsYXNzJyk7XG4gICAgY29uc3QgaWQgPSBtYXliZUlkID09PSB1bmRlZmluZWQgPyAnJyA6IGAjJHttYXliZUlkfWA7XG5cbiAgICBjb25zdCBjaGlsZHMgPSBfLm1hcCgkZWxlbS5jaGlsZHJlbigpLCAoZWxlbUNoaWxkOiBKUXVlcnkpID0+IHtcbiAgICAgIHJldHVybiBsb29wKGVsZW1DaGlsZCk7XG4gICAgfSk7XG4gICAgaWYgKGNoaWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gVHJlZS5Ob2RlKGAke2lkfS4ke2Nsc31gLCBjaGlsZHMpO1xuICAgIH1cbiAgICByZXR1cm4gVHJlZS5MZWFmKGAke2lkfS4ke2Nsc31gKTtcbiAgfVxuXG4gIHJldHVybiBsb29wKCQocm9vdFNlbGVjdG9yKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXNjZW5kYW50VHJlZVN0cmluZyhyb290U2VsZWN0b3I6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGRlc2MgPSBnZXREZXNjZW5kYW50VHJlZShyb290U2VsZWN0b3IpO1xuICByZXR1cm4gVHJlZS5kcmF3VHJlZShkZXNjKS50b1N0cmluZygpO1xufVxuIl19